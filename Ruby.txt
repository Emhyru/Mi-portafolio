'module Pepita
   def self.cantar!
   end
end
________________________
> Pepita.volar_en_circulos!
> Pepita.volar_en_circulos!
> Pepita.energia
________________________
module Pepita
    @energia = 100
  
    def self.volar_en_circulos!
        @energia-=10
    end
  
    def self.comer_lombriz!
       @energia+=20
    end
  
    @ciudad=Iruya
    def self.volar_hacia!(destino)
    @ciudad=Obera
    @energia-=100
    end
end
______________________________
module BuenosAires
  def self.kilometro
    0
  end
end
  
module Obera
  def self.kilometro
    1040
  end
end

module Iruya
  def self.kilometro
    1710
  end  
end

module Pepita
  @energia = 1000
  @ciudad = Obera
  
  def self.energia
    @energia 
  end
  
  def self.ciudad
    @ciudad
  end
  
  def self.cantar!
    'pri pri pri'
  end
  
  def self.comer_lombriz!
    @energia += 20
  end
  
  def self.volar_en_circulos!
    @energia -= 10
  end
  
  def self.volar_hacia!(destino)
    @energia -= (destino.kilometro - @ciudad.kilometro).abs/2
    @ciudad = destino
  end
end
______________________________________________________________________
module Obera
  def self.kilometro
    1040
  end
   def self.distancia_a(destino)
   (destino.kilometro-self.kilometro).abs
  end
end

module Iruya
  def self.kilometro
    1710
  end 
  def self.distancia_a(destino)
   (destino.kilometro-self.kilometro).abs
  end
end

module BuenosAires
  def self.kilometro
    0
  end 
  def self.distancia_a(destino)
   (destino.kilometro-self.kilometro).abs
  end
end

module Pepita
  @energia = 1000
  @ciudad = Obera
  
  def self.energia
    @energia 
  end
  
  def self.ciudad
    @ciudad
  end
  
  def self.cantar!
    'pri pri pri'
  end
  
  def self.comer_lombriz!
    @energia += 20
  end
  
  def self.volar_en_circulos!
    @energia -= 10
  end
  
  def self.volar_hacia!(destino)
    self.gastar_energia!(destino)
    @ciudad = destino
  end

  def self.gastar_energia!(destino)
    @energia -= @ciudad.distancia_a(destino) / 2
  end
  
  
end
____________________________________________________
module Jose
  def self.acomodar_habitacion!
    self.ordenar!
    if self.tiene_sabanas_sucias?
      self.cambiar_sabanas!
    end
    self.tender_la_cama!
  end
end
_____________________________________________________________
module Jardinero
  def self.cuidar!(planta)
    if planta.necesita_agua?
      3.times { self.regar! planta }
    else
      self.sacar_bichos! planta
    end
  end
end
__________________________________________________________________
module Pepita
  @energia = 1000

  def self.energia
    @energia 
  end

  def self.volar_en_circulos!
    @energia -= 10
  end
  
  def self.comer_alpiste!(gramos)
    @energia += gramos * 15
  end  

  def self.debil?
    self.energia<100
  end
  
  def self.feliz?
    self.energia>1000
  end
  
  def self.hacer_lo_que_quiera!
    if self.debil?
     self.comer_alpiste!(10)
    else
      3.times{self.volar_en_circulos!}
      
  end
 end  
end
_________________________________________________________
module Docente
  def self.nota_conceptual(nota)
    if nota > 8
      "Sobresaliente"
    else
      if nota > 6
        "Satisfactoria"
      else
        "No satisfactoria"
      end
    end
  end
end
__________________________________________________________________
  def self.hacer_lo_que_quiera!
    if self.debil?
     self.comer_alpiste!(10)
    elsif self.feliz?
        5.times{self.volar_en_circulos!}
      else
      3.times{self.volar_en_circulos!}
      end
  
 end  
____________________________________________________________________
module Pepo
  @energia = 1000
  
   def self.energia
    @energia 
  end
  def self.comer_alpiste!(gramos)
    @energia += gramos /2
  end  
  def self.volar_en_circulos!
    if self.energia>1100
      @energia-=15
    else
      @energia-=5
    end
  end
  def self.hacer_lo_que_quiera!
    self.comer_alpiste!(120)
  end
end
___________________________________________________________________________
module Pachorra
  def self.firmar_contrato!(ave)
    @ave=ave
  end
  
  def self.entrenar_ave!
    10.times{@ave.volar_en_circulos!}
    @ave.comer_alpiste!(30)
    5.times{@ave.volar_en_circulos!}
    @ave.hacer_lo_que_quiera!
  end
end
__________________________________________________
module Pachorra
  def self.ave=(ave_nueva)
    @ave = ave_nueva
  end
  
  def self.entrenar_ave!
    10.times { @ave.volar_en_circulos! }
    @ave.comer_alpiste! 30
    5.times { @ave.volar_en_circulos! }
    @ave.hacer_lo_que_quiera!
  end
end
_________________________________________________
module Inodoro
  @cafeina_en_sangre = 90
  
  def self.cafeina_en_sangre
    @cafeina_en_sangre
  end
  def self.compinche
    @compinche
  end
  def self.compinche=(nuevo_compinche)
    @compinche=nuevo_compinche
  end
end

module Eulogia
  @enojada = false
  
 def self.enojada?
   @enojada
 end
end

module Mendieta
  @ganas_de_hablar = 5
  
 def self.ganas_de_hablar
   @ganas_de_hablar
 end
  def self.ganas_de_hablar=(ganas)
   @ganas_de_hablar=ganas
 end
end
________________________________________
module Pepita
  @energia = 100

  def self.volar_en_circulos!
    @energia -= 10
  end

  def self.ciudad=(una_ciudad)
      @ciudad = una_ciudad
  end

  def self.ciudad
    @ciudad
  end
end
________________________________________
module Fideos
  def self.ajies
    @ajies = 0
  end

  def self.agregar_aji!
    @ajies += 1
  end

  def self.sacar_aji!
    @ajies -= 1
  end

  def self.picantes?
    @ajies > 2
  end

  def self.descartar_la_salsa?
    @ajies > 10
  end

  def self.descartar_la_salsa!
    @ajies = 0
  end
end

module Jor
  def self.plato_del_dia=(v)
    @plato_del_dia = (v)
  end

  def self.picantear!
    5.times { @plato_del_dia.agregar_aji! }
  end
end

module Luchi
  def self.suavizar! (plato, cantidad)
    if plato.descartar_la_salsa?
      plato.descartar_la_salsa!
    elsif plato.picantes?
      cantidad.times { plato.sacar_aji! }
    end
  end
end
_______________________________________________
module CarlosDuty
 @cantidad_logros=0
  
  def self.dificultad
    30 - (@cantidad_logros * 0.5)
  end
  
  def self.jugar!(un_tiempo)
   if un_tiempo>2
    @cantidad_logros+=1
    end
  end
  
  def self.violento?
   true
  end

end

module TimbaElLeon
  @dificultad=25
  
  def self.dificultad
    @dificultad
  end
  
  def self.violento?
    false
  end
  
  def self.jugar!(un_tiempo)
    @dificultad+=un_tiempo
  end
end

module Metroide
  @nivel_espacial=3
  
  def self.dificultad
    100
  end
  
  def self.violento?
    false
    if @nivel_espacial>5
      true
    end
  end
  def self.jugar!(un_tiempo)
    @nivel_espacial+=un_tiempo
  end
end
_______________________________________
module Juegoteca
  @juegos=[CarlosDuty,TimbaElLeon,Metroide]
  @puntos=0
  
  def self.juegos
    @juegos
  end
  def self.puntos
    @puntos
  end
  
  def self.adquirir_juego!(un_juego)
   @juegos.push(un_juego)
   @puntos+=150
  end
  
  def self.borrar_juego!(un_juego)
    @juegos.delete(un_juego)
  end
  
  def self.completa?
    @puntos>1000 && @juegos.size> 5
    end
  
  def self.juego_recomendable?(un_juego)
    !@juegos.include?(un_juego) && un_juego.violento?
  end
end
___________________________________________________
jugar_a_timba = proc {|tiempo_en_minutos|TimbaElLeon.jugar!(tiempo_en_minutos/60) }

_______________________________________________________________
module Juegoteca
  @juegos=[CarlosDuty,TimbaElLeon,Metroide]
  
  def self.juegos
    @juegos
  end
  
  def self.juegos_violentos
    juegos_violentos=@juegos.select {|juegos_violentos| juegos_violentos.violento?}
  end
end
_______________________________________________________________________
class Zombi
  def initialize
    @salud = 100
  end
  
  def salud
    @salud
  end
  
   def gritar
   "Â¡agrrrg!"
  end
  
   def sabe_correr?
    false
  end

  def recibir_danio!(puntos)
    @salud=[(@salud-puntos*2),0].max
  end

  def sin_vida?
    @salud==0
  end
  
end
________________________________________________________
class Sobreviviente
  def initialize 
  @energia=1000
  end
  
  def energia
    @energia
  end
  
  def atacar! (zombie,puntos)
   zombie.recibir_danio!(puntos) 
  end
  
  
end

juliana = Sobreviviente.new
anastasia = Sobreviviente.new
_______________________________________
class Sobreviviente
  def initialize 
  @energia=1000
  end
  
  def energia
    @energia
  end
  
  def atacar! (zombi,puntos)
   zombi.recibir_danio!(puntos) 
  end
  
  def ataque_masivo!(zombis)
    zombis.each {|zombi| atacar!(zombi,15)}
end
end

juliana = Sobreviviente.new
anastasia = Sobreviviente.new

caminantes = []
20.times{caminantes.push(Zombi.new)}
_______________________________________________
module Modulo
  def self.setter=(parametro)
    @variable = parametro
  end
end
_____________________________
class Sobreviviente
  def initialize
    @energia = 1000
  end

  def energia
    @energia
  end
  
  def atacar!(zombie, danio)
    zombie.recibir_danio!(danio)
  end
  
  def ataque_masivo!(zombis)
    zombis.each { |zombi| atacar!(zombi, 15) }
    @energia*=0.5
  end
  
  def beber!
    @energia*=1.25
  end
end
___________________________________________
class Aliado
  def initialize
    @energia = 500
  end

  def energia
    @energia
  end
   
  def ataque_masivo!(zombis)
    zombis.each { |zombi| atacar!(zombi, 20) }
    @energia*=0.5
  end
  
  def atacar!(zombi,danio)
    zombi.recibir_danio!(danio)
  @energia*=0.95 --------- 5% menos, multiplicarlo por 1, es 100%, por 0.95 es el 95%-5% menos
  end
  
  def beber!
    @energia*=1.10
  end
end
____________________________________________
class Celular
  def initialize 
    @bateria=100
  end
  
  def utilizar!(minutos)
    @bateria=@bateria-(minutos/2)
  end
  
  def cargar_a_tope!
    @bateria=100
  end
end
_______________________________________________
class Dispositivo 
  def initialize 
    @bateria=100
  end
  
   def cargar_a_tope!
    @bateria=100
  end
end 
class Celular<Dispositivo
  def utilizar!(minutos)
    @bateria=@bateria-(minutos/2)
  end
end

class Notebook<Dispositivo
  def utilizar!(minutos)
   @bateria=@bateria-(minutos)
  end
end
__________________________________________
class MedioDeTransporte 
  def initialize(litros)
    @combustible=(litros)
  end
  
  def cargar_combustible!(litros)
    @combustible+=litros
  end
  
  def entran?(cantidad)
   self.maximo_personas>=(cantidad) 
  end
end

class Auto<MedioDeTransporte
  def maximo_personas
    5
  end
  
  def recorrer!(kilometro)
    @combustible=combustible-(kilometro)/2
  end
  
end

class Moto<MedioDeTransporte 
  def maximo_personas
    2
  end
  
  def recorrer!(kilometro)
    @combustible=combustible-kilometro
  end
end
_______________________________________________
class MedioDeTransporte
   def initialize(litros)
    @combustible=(litros)
  end
  
  def cargar_combustible!(litros)
    @combustible+=litros
  end
  
   def entran?(cantidad)
   self.maximo_personas>=(cantidad) 
  end
end
class Colectivo<MedioDeTransporte 
  def maximo_personas
    20
  end
 
  def recorrer!(kilometros)
    @combustible=combustible-(kilometros)*2
  end
end
________________________________________________
class MedioDeTransporte
   def initialize(litros)
    @combustible=(litros)
  end
  
  def cargar_combustible!(litros)
    @combustible+=litros
  end
  
   def entran?(cantidad)
   self.maximo_personas>=(cantidad) 
  end
end
class Colectivo<MedioDeTransporte 
  def initialize
    @combustible=100
    @pasajeros=0
  end
  
  def entran?(cantidad)
    true
  end
  
  def maximo_personas
    20
  end
 
  def recorrer!(kilometros)
    @combustible=combustible-(kilometros)*2
  end
end
_________________________________________________
class Zombi
  def initialize(salud_inicial)
    @salud = salud_inicial
  end
  
  def salud
    @salud
  end
  
  def gritar
    "Â¡agrrrg!"
  end
  
  def sabe_correr?
    false
  end
  
  def sin_vida?
    @salud == 0
  end
  
  def recibir_danio!(puntos)
    @salud = [@salud - puntos * 2, 0].max
  end
end


class SuperZombi<Zombi
  def sabe_correr?
    true
  end
  
  def recibir_danio!(puntos)
      @salud = [@salud - puntos * 3, 0].max
  end
  
  def regenerarse!
    @salud=100
  end
end
____________________________________________________
class Zombi
  def initialize(salud_inicial)
    @salud = salud_inicial
  end
  
  def salud
    @salud
  end
  
  def gritar
    "Â¡agrrrg!"
  end
  
  def sabe_correr?
    false
  end
  
  def sin_vida?
    @salud == 0
  end
  
  def recibir_danio!(puntos)
    @salud = [@salud - puntos * 2, 0].max
  end
  
  def descansar!(minutos)
    @salud=salud+minutos
  end
end


class SuperZombi<Zombi
  def sabe_correr?
    true
  end
  
  def recibir_danio!(puntos)
      @salud = [@salud - puntos * 3, 0].max
  end
  
  def regenerarse!
    @salud=100
  end
end
______________________________________________________

getter los @
